---
import type { Carousel as CarouselType } from '../lib/strapi';
import { getStrapiImageUrl } from '../lib/strapi';

interface Props {
  carousel: CarouselType;
}

const { carousel } = Astro.props;

// Check for Items field directly on carousel or in attributes
const items = carousel.Items || [];

// Helper function to find image field in item (Strapi v5 flattened format)
function getImageField(item: any) {
  // Check common image field names - prioritize the one we found: "Image"
  const imageFieldNames = ['Image', 'image', 'photo', 'Photo', 'picture', 'Picture', 'media', 'Media'];
  for (const fieldName of imageFieldNames) {
    if (item[fieldName]?.url) {
      return item[fieldName];
    }
  }
  return null;
}

---

<div class="carousel-container">
  <div class="carousel" id={`carousel-${carousel.id}`}>
    <div class="carousel-track">
      {items.map((item, index) => (
        <div class="carousel-item" data-index={index}>
          <div class="carousel-card">
            {(() => {
              const imageData = getImageField(item);
              return imageData?.url ? (
                <div class="carousel-image">
                  <img
                    src={getStrapiImageUrl(imageData)}
                    alt={imageData.alternativeText || item.Title}
                    loading="lazy"
                  />
                </div>
              ) : (
                <div class="carousel-image-placeholder">
                  <div class="placeholder-content">
                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                      <circle cx="9" cy="9" r="2"></circle>
                      <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"></path>
                    </svg>
                    <p>Add image in Strapi</p>
                  </div>
                </div>
              );
            })()}
            <div class="carousel-content">
              <h3 class="carousel-title">{item.Title}</h3>
              {item.Subtitle && (
                <p class="carousel-subtitle">{item.Subtitle}</p>
              )}
              {item.Link_url && item.Link_text && (
                <a href={item.Link_url} class="carousel-link">
                  {item.Link_text}
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="5" y1="12" x2="19" y2="12"></line>
                    <polyline points="12 5 19 12 12 19"></polyline>
                  </svg>
                </a>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    {items.length > 1 && (
      <>
        <button class="carousel-button prev" aria-label="Previous slide">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>
        <button class="carousel-button next" aria-label="Next slide">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
        
        <div class="carousel-indicators">
          {items.map((_, index) => (
            <button 
              class={`indicator ${index === 0 ? 'active' : ''}`}
              aria-label={`Go to slide ${index + 1}`}
              data-index={index}
            ></button>
          ))}
        </div>
      </>
    )}
  </div>
</div>

<style>
  .carousel-container {
    width: 100%;
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .carousel {
    position: relative;
    overflow: hidden;
    border-radius: 16px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  }

  .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-item {
    min-width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem 2rem;
  }

  .carousel-card {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    align-items: center;
    text-align: center;
    max-width: 1000px;
    width: 100%;
  }

  /* If there is an image or placeholder, use side-by-side layout */
  .carousel-card:has(.carousel-image),
  .carousel-card:has(.carousel-image-placeholder) {
    grid-template-columns: 1fr 1fr;
    text-align: left;
    gap: 3rem;
  }

  /* Add a placeholder for when image is missing */
  .carousel-image-placeholder {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    aspect-ratio: 16 / 9;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .placeholder-content {
    text-align: center;
    color: #4a5568;
  }

  .placeholder-content svg {
    margin-bottom: 1rem;
    opacity: 0.6;
  }

  .placeholder-content p {
    font-size: 0.875rem;
    font-weight: 500;
    margin: 0;
  }

  .carousel-image {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    aspect-ratio: 16 / 9;
  }

  .carousel-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .carousel-content {
    color: white;
  }

  .carousel-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 1rem 0;
    line-height: 1.2;
  }

  .carousel-subtitle {
    font-size: 1.25rem;
    line-height: 1.6;
    margin: 0 0 2rem 0;
    opacity: 0.9;
  }

  .carousel-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.75rem;
    background: white;
    color: #667eea;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .carousel-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    background: #f8f9fa;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 10;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .carousel-button:hover {
    background: white;
    transform: translateY(-50%) scale(1.1);
  }

  .carousel-button.prev {
    left: 1rem;
  }

  .carousel-button.next {
    right: 1rem;
  }

  .carousel-button svg {
    color: #667eea;
  }

  .carousel-indicators {
    position: absolute;
    bottom: 1.5rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.75rem;
    z-index: 10;
  }

  .indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid white;
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
  }

  .indicator.active,
  .indicator:hover {
    background: white;
    transform: scale(1.2);
  }

  @media (max-width: 768px) {
    .carousel-card {
      grid-template-columns: 1fr;
      gap: 2rem;
      text-align: center;
    }

    .carousel-card:has(.carousel-image),
    .carousel-card:has(.carousel-image-placeholder) {
      grid-template-columns: 1fr;
      text-align: center;
      gap: 2rem;
    }

    .carousel-item {
      padding: 2rem 1rem;
    }

    .carousel-title {
      font-size: 1.75rem;
    }

    .carousel-subtitle {
      font-size: 1rem;
    }

    .carousel-button {
      width: 40px;
      height: 40px;
    }

    .carousel-button.prev {
      left: 0.5rem;
    }

    .carousel-button.next {
      right: 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel');
    
    carousels.forEach((carousel) => {
      const track = carousel.querySelector('.carousel-track') as HTMLElement;
      const items = carousel.querySelectorAll('.carousel-item');
      const prevButton = carousel.querySelector('.prev');
      const nextButton = carousel.querySelector('.next');
      const indicators = carousel.querySelectorAll('.indicator');
      
      let currentIndex = 0;
      const totalItems = items.length;
      
      if (totalItems <= 1) return;
      
      function updateCarousel() {
        track.style.transform = `translateX(-${currentIndex * 100}%)`;
        
        indicators.forEach((indicator, index) => {
          indicator.classList.toggle('active', index === currentIndex);
        });
      }
      
      function goToSlide(index: number) {
        currentIndex = (index + totalItems) % totalItems;
        updateCarousel();
      }
      
      prevButton?.addEventListener('click', () => {
        goToSlide(currentIndex - 1);
      });
      
      nextButton?.addEventListener('click', () => {
        goToSlide(currentIndex + 1);
      });
      
      indicators.forEach((indicator) => {
        indicator.addEventListener('click', (e) => {
          const target = e.currentTarget as HTMLElement;
          const index = parseInt(target.dataset.index || '0');
          goToSlide(index);
        });
      });
      
      // Auto-play (optional)
      let autoPlayInterval = setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 5000);
      
      // Pause auto-play on hover
      carousel.addEventListener('mouseenter', () => {
        clearInterval(autoPlayInterval);
      });
      
      carousel.addEventListener('mouseleave', () => {
        autoPlayInterval = setInterval(() => {
          goToSlide(currentIndex + 1);
        }, 5000);
      });
    });
  });
</script>

